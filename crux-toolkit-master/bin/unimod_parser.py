#!/usr/bin/env python2
#
# This script parses a Unimod XML file from http://www.unimod.org/xml/unimod.xml
# and produces a C++ header file containing the modification information.
#
# Usage: unimod_parser.py unimod.xml > output.h

import sys
import xml.etree.ElementTree as ET

# constants
SOURCE_NAMESPACE = 'Unimod'
SOURCE_POSITION_ENUM = 'Position'
SOURCE_POSITION_ENUM_ANY = 'ANYWHERE'
SOURCE_POSITION_ENUM_ANY_N = 'ANY_N'
SOURCE_POSITION_ENUM_ANY_C = 'ANY_C'
SOURCE_POSITION_ENUM_PROTEIN_N = 'PROTEIN_N'
SOURCE_POSITION_ENUM_PROTEIN_C = 'PROTEIN_C'
SOURCE_MODIFICATION_CLASS = 'Modification'

def main():
    if len(sys.argv) != 2:
        sys.stderr.write('Usage: %s <Unimod XML file>\n' % sys.argv[0])
        return

    root = ET.parse(sys.argv[1]).getroot()
    mods = root.find('{http://www.unimod.org/xmlns/schema/unimod_2}modifications')
    if mods == None:
        raise ValueError('modifications tag not found')
    parsed_mods = []
    for mod in mods.findall('{http://www.unimod.org/xmlns/schema/unimod_2}mod'):
        parsed_mod = Modification()
        id_str = mod.get('record_id')
        try:
            parsed_mod.unimod_id = int(id_str)
        except:
            raise ValueError('invalid mod id "%s"' % id_str)
        parsed_mod.title = mod.get('title')
        # strip out non-ascii characters from name
        parsed_mod.full_name = ''.join(c for c in mod.get('full_name') if ord(c) < 128)
        for child in mod:
            if child.tag == '{http://www.unimod.org/xmlns/schema/unimod_2}specificity':
                site = child.get('site')
                if site == 'N-term':
                    site = 'n'
                elif site == 'C-term':
                    site = 'c'
                elif not (len(site) == 1 and site.isalpha() and site.isupper()):
                    raise ValueError('invalid site "%s" in unimod id %s' % (site, id_str))
                position = child.get('position')
                if position not in ['Anywhere', 'Any N-term', 'Any C-term', 'Protein N-term', 'Protein C-term']:
                    raise ValueError('invalid position "%s" in unimod id %s' % (position, id_str))
                parsed_mod.specificities.append(ModificationSpecificity(site, position))
            elif child.tag == '{http://www.unimod.org/xmlns/schema/unimod_2}delta':
                if parsed_mod.mono_mass != None:
                    raise ValueError('multiple mono masses for unimod id %s' % id_str)
                if parsed_mod.avg_mass != None:
                    raise ValueError('multiple avg masses for unimod id %s' % id_str)
                mono_mass_str = child.get('mono_mass')
                try:
                    parsed_mod.mono_mass = float(mono_mass_str)
                except:
                    raise ValueError('invalid mono mass "%s" in unimod id %s' % (mono_mass_str, id_str))
                avg_mass_str = child.get('avge_mass')
                try:
                    parsed_mod.avg_mass = float(avg_mass_str)
                except:
                    raise ValueError('invalid avg mass "%s" in unimod id %s' % (avg_mass_str, id_str))
        parsed_mod.verify()
        parsed_mods.append(parsed_mod)

    if len(parsed_mods) == 0:
        raise ValueError('no modifications found')

    # print source file
    print('''#ifndef CRUX_UNIMOD_H
#define CRUX_UNIMOD_H

// This file was automatically generated by bin/unimod_parser.py

#include <algorithm>
#include <limits>
#include <set>
#include <string>
#include <utility>

namespace ''' + SOURCE_NAMESPACE + ''' {

enum ''' + SOURCE_POSITION_ENUM + ' { ' + SOURCE_POSITION_ENUM_ANY + ', ' + SOURCE_POSITION_ENUM_ANY_N + ', ' + SOURCE_POSITION_ENUM_ANY_C + ', ' + SOURCE_POSITION_ENUM_PROTEIN_N + ', ' + SOURCE_POSITION_ENUM_PROTEIN_C + ''' };

class ''' + SOURCE_MODIFICATION_CLASS + ''' {
public:
  ''' + SOURCE_MODIFICATION_CLASS + '''():
    title_(""), name_(""), monoMass_(std::numeric_limits<double>::quiet_NaN()), avgMass_(std::numeric_limits<double>::quiet_NaN()) {}
  ''' + SOURCE_MODIFICATION_CLASS + '''(
    const std::string& title,
    const std::string& name,
    double monoMass,
    double avgMass,
    const std::set< std::pair<char, ''' + SOURCE_POSITION_ENUM + '> > specificities = std::set< std::pair<char, ' + SOURCE_POSITION_ENUM + '''> >()
  ):
    title_(title), name_(name), monoMass_(monoMass), avgMass_(avgMass), specificities_(specificities) {
  }
  ''' + SOURCE_MODIFICATION_CLASS + '(const ' + SOURCE_MODIFICATION_CLASS + '''& other):
    title_(other.title_), name_(other.name_), monoMass_(other.monoMass_), avgMass_(other.avgMass_), specificities_(other.specificities_) {
  }
  ~''' + SOURCE_MODIFICATION_CLASS + '''() {}
  friend void swap(''' + SOURCE_MODIFICATION_CLASS + '& x, ' + SOURCE_MODIFICATION_CLASS + '''& y) {
    using std::swap;
    swap(x.title_, y.title_);
    swap(x.name_, y.name_);
    swap(x.monoMass_, y.monoMass_);
    swap(x.avgMass_, y.avgMass_);
  }
  ''' + SOURCE_MODIFICATION_CLASS + '& operator=(' + SOURCE_MODIFICATION_CLASS + ''' rhs) {
    swap(*this, rhs);
    return *this;
  }
  void addSpecificity(char site, ''' + SOURCE_POSITION_ENUM + ''' position) {
    specificities_.insert(std::make_pair(site, position));
  }
  std::string getTitle() const { return title_; }
  std::string getName() const { return name_; }
  double getMonoMass() const { return monoMass_; }
  double getAvgMass() const { return avgMass_; }
  std::set< std::pair<char, ''' + SOURCE_POSITION_ENUM + '''> > getSpecificities() const { return specificities_; }
private:
  std::string title_;
  std::string name_;
  double monoMass_;
  double avgMass_;
  std::set< std::pair<char, ''' + SOURCE_POSITION_ENUM + '''> > specificities_;
};

static ''' + SOURCE_MODIFICATION_CLASS + ''' Get(int unimodId) {
  switch (unimodId) {
    default:
      return ''' + SOURCE_MODIFICATION_CLASS + '''();''')
    for mod in parsed_mods:
        print('    case %d: {' % mod.unimod_id)
        print('      %s mod("%s", "%s", %f, %f);' % (SOURCE_MODIFICATION_CLASS, mod.title, mod.full_name, mod.mono_mass, mod.avg_mass))
        for specificity in mod.specificities:
            print('      mod.addSpecificity(\'%s\', %s);' % (specificity.site, specificity.position))
        print('      return mod;')
        print('    }')
    print('''  }
}

}

#endif
''')

class Modification:
    def __init__(self):
        self.unimod_id = None
        self.title = None
        self.full_name = None
        self.mono_mass = None
        self.avg_mass = None
        self.specificities = []
    def verify(self):
        if self.unimod_id == None:
            raise ValueError('parsed modification is missing unimod id')
        if self.title == None:
            raise ValueError('parsed modification is missing title')
        if self.full_name == None:
            raise ValueError('parsed modification is missing full name')
        elif self.mono_mass == None:
            raise ValueError('parsed modification is missing mono mass')
        elif self.avg_mass == None:
            raise ValueError('parsed modification is missing avg mass')
        elif len(self.specificities) == 0:
            raise ValueError('parsed modification has no specificities')

class ModificationSpecificity:
    def __init__(self, site, position):
        self.site = site
        if position in ['Anywhere', SOURCE_POSITION_ENUM_ANY]:
            self.position = SOURCE_POSITION_ENUM_ANY
        elif position in ['Any N-term', SOURCE_POSITION_ENUM_ANY_N]:
            self.position = SOURCE_POSITION_ENUM_ANY_N
        elif position in ['Any C-term', SOURCE_POSITION_ENUM_ANY_C]:
            self.position = SOURCE_POSITION_ENUM_ANY_C
        elif position in ['Protein N-term', SOURCE_POSITION_ENUM_PROTEIN_N]:
            self.position = SOURCE_POSITION_ENUM_PROTEIN_N
        elif position in ['Protein C-term', SOURCE_POSITION_ENUM_PROTEIN_C]:
            self.position = SOURCE_POSITION_ENUM_PROTEIN_C
        else:
            raise ValueError('invalid specificity position: %s' % position)

if __name__ == '__main__':
    main()


#!/usr/bin/env python
# CREATE DATE: 18 June 2016
# AUTHOR: Jared moore

import glob
import matplotlib.pyplot as plot
import os

'''
This script has to extract the data points from the various files, namely,
for each number of input files, it should plot a point for each pair of
(num spectra, max memory usage) and (num spectra, system time) on memory.png
and time.png, respectively

generate plots from $HOME/barista_benchmark/*
files are in the form of <NUM_MS2_FILES>.<time | memory>.<usage | size>.txt
<NUM_MS2_FILES>.<time | memory>.size.txt
is output from ~wnoble/bin/getsize-ms2.py
and <NUM_MS2_FILES>.time.usage.txt is output from time <some script to time>
and <NUM_MS2_FILES>.memory.usage.txt is output from valgrind --tool=massif
<some script to time>
'''

def main():
    num_to_mem = dict()
    num_to_time = dict()
    num_to_spectra = dict()
    # Gather all of the files output to the output directory
    # Regex here is just sanity checking
    files = glob.glob(r'~/barista_benchmark/\d+\.(memory|time|size)\.usage\.txt')
    for f in files:
        numms2 = file_name_to_num(f)
        openf = open(f, 'r')
        if "memory" in f:
            memory = memory_file_to_memory(openf)
            num_to_mem[numms2] = memory
        elif "time" in f:
            time = time_file_to_time(openf)
            num_to_time[numms2] = time
        else:
            assert "size" in f
            spectra = size_file_to_size(openf)
            num_to_spectra[numms2] = spectra
        openf.close()
    # If we assume valid input and if items() gives the items in the same order
    # with respect to the keys, this should work
    # This collapses the mapped items together, sorts them according to number of
    # spectra, and then unzips into three lists (necessary for graphing code)
    sizes, times, mems = zip(*zip(num_to_spectra.items(), num_to_mem.items(),
                                  num_to_time.items()).sort())
    output_graph(sizes, times, "number of spectra", "time (s)", "Barista performance "
                 + "with increasing input sizes", "time")
    output_graph(sizes, mems, "number of spectra", "max memory usage (Gb)", "Barista "
                 + "memory usage with increasing input sizes", "memory")

def output_graph(x, y, xlabel, ylabel, title, name):
    ''' Write a graph of x and y with given labels to plots/name.png '''
    figure = plot.figure()
    # TODO: is the the size that we want?
    ax = figure.add_subplot(111)
    p = ax.plot(x, y, 'b')
    ax.set_xlabel(xlabel)
    ax.set_ylabel(ylabel)
    ax.set_title(title)
    plot.savefig('plots/%s.png' % name)

def file_name_to_num(file_name):
    ''' Returns the \d of {/.*}*\d\.+.* (the number at the beginning of a file basename
    '''
    name = os.path.basename(file_name)
    index = name.index(".")
    assert index > -1
    return int(name[0 : index])

def size_file_to_size(size_file):
    ''' Returns the number of spectra reported in size_file
    Assumes size_file was generated by getsize-ms2.py '''
    # The number of spectra should just be the first line
    return int(size_file.next.split()[0])

def memory_file_to_memory(memory_file):
    ''' Returns the max memory usage reported in memory_file which is assumed to have
    come from ms_print analysis of massif output '''
    # TODO: I'm not sure how to extract the max memory usage from the massif
    # or ms_print output
    return 0

def time_file_to_time(time_file):
    ''' Returns the time represented in time_file
    Assumses time_file is from the output of /usr/bin/time '''
    # TODO: I'm not sure if we should use the real user or sys time
    # There should just be one number because of the format specificed
    # in time_job.sh
    return float(time_file.next())

if __name__ == "__main__":
    main()

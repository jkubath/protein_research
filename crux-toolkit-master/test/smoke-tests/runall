#!/bin/bash -x

exit

# These three options make it harder to for some part of a script to
# fail without you recognizing it. nounset means that references to an
# unset variable result in an error. This means that you can no longer
# do stuff like this if VAR is potentially unset, because "$VAR" returns
# an error rather than "":
#
# if [ "$VAR" ]; then
#
# fi
#
# To explicitly indicate that you are OK with the variable potentially
# being empty you can instead use ${VAR:-}.

set -o nounset
set -o pipefail
set -o errexit 
set -o xtrace

# Make sure the testing script is executable.
chmod 774 crux-test.pl

# Make a soft link for some inscrutable reason.
ln -fs test.fasta existing.fasta

# Remove any lingering output files.
./clean.sh

# Run the actual tests.
# N.B. Add a "-u" option to this line to update all of the output files.
# or do 'for f in good_results/*.observed; do mv $f ${f%.observed}; done'
./crux-test.pl -p ../../ crux-test.cmds 1>out 2>error

# Print an error message if the test aborted.
if [ $? == 25 ]
then echo "Test aborted"
else
	tail -n6 out
fi

echo "  Test output in the file 'out'.  Error messages in 'error'."

# List of commands to be run by crux-test.pl
# Format is these fields separated by an equals sign ('=').
#    darwin                (0 or 1, depending on whether the test should be
#                           be run on a darwin OS)
#    test name             (printed to the output as a label for the command)
#    standard filename     (path to file with the expected output)
#    command               (command with options and args to be run)
#    ignore string         (regex to ignore for diff command, 're 1' 're 2'

# Analyze existing search results
#1 = analyze_matches_existing = good_results/analyze_matches_existing.percolator.target.txt = crux percolator --no-schema-validation T  --feature-file T --overwrite T pin.xml; cat existing_search/percolator.target.txt = 'Time' 'Database'

# Percolate search-for-matches results with sp
#1 = percolator = good_results/sp.percolator.target.txt =  crux percolator --parameter-file params/sp --output-dir crux-output-sp test.fasta crux-output-sp; cat crux-output-sp/percolator.target.txt = 'Time'

# Search for matches and estimate p-values with modifications
# TODO

# TESTS WITH INDEX

# See that match_analysis works with an existing index and existing results
#1 = analyze_matches_existing_index_and_results = good_results/analyze_matches_existing.percolator.target.txt =  rm -f existing_search/percolator*; crux percolator --output-dir existing_search existing_crux_index existing_search; cat existing_search/percolator.target.txt = 'StartTime' 'Database'

# See that match_analysis works with an existing index and new results
#1 = analyze_matches_existing_index = good_results/analyze_matches_existing_index.percolator.target.txt =  crux percolator --parameter-file params/set_rand_seed existing_crux_index crux-output; cat crux-output/percolator.target.txt = 'StartTime'

# Create index. Use crux generate-peptides to test that it worked

1 = create_index_no_decoy = good_results/standard_create_index_no_decoy.out = rm -rf test_crux_index; crux create-index --decoys none test.fasta test_crux_index; cat test_crux_index/README test_crux_index/crux_index_map = 'time'

1 = generate_peptides_test_index = good_results/standard_generate_peptides_use_index.out = crux generate-peptides --output-sequence T test_crux_index = '# PROTEIN DATABASE'

# test that mods work with the index
1 = generate_peptides_mods_index = good_results/standard_generate_peptides_mods_index = crux generate-peptides --parameter-file params/mods --output-sequence T --max-length 20  test_crux_index =

# create an index with all defaults (including decoys, but do set the random seed)
1 = create_index_default = good_results/standard_create_index_default.out = rm -rf test_crux_index; crux create-index --decoys peptide-shuffle --parameter-file params/set_rand_seed test.fasta test_crux_index; cat test_crux_index/README test_crux_index/crux_index_map = 'time'
1 = generate_peptides_test_index = good_results/standard_generate_peptides_use_index.out = crux generate-peptides --output-sequence T test_crux_index = '# PROTEIN DATABASE'

# Search for matches and test txt file
1 = search_for_matches_default_index = good_results/search_for_matches_default_index.target.txt = rm -f crux-output/search.target.txt; crux search-for-matches --overwrite T --decoys peptide-shuffle --parameter-file params/params_uniq test.ms2 test_crux_index; cat crux-output/search.target.txt = 'Time' 'Database'

# Analyze matches using above index
#1 = analyze_matches_index = good_results/analyze_matches_index.percolator.target.txt =  crux percolator --overwrite T --parameter-file params/set_rand_seed test_crux_index crux-output; cat crux-output/percolator.target.txt = 'StartTime'

# Test sequest-search with an index
1 = sequest_search_default = good_results/sequest_search.target.txt = rm -rf ss; crux sequest-search --decoys peptide-shuffle --output-dir ss test.ms2 test_crux_index; cat ss/sequest.target.txt  ss/sequest.decoy.txt

# confirm that the decoys from an index search are the same as searching the index's decoy fasta file
# compare to previous search results
1 = index_decoys = good_results/index_decoy.target.txt = cut -f1-17 ss/sequest.decoy.txt > good_results/index_decoy.target.txt; crux sequest-search --output-dir ss --fileroot fasta --decoys none test.ms2 test_crux_index/test-random.fasta; cat ss/fasta.sequest.target.txt

# compare a concatinated fasta seach with an indexed target-decoy-competition search
# the concatinated test can't use the same matches per spectrum value for targets and decoys so remove that column
# those results also do not have the unshuffled peptide or decoy matches/spectrum columns
1 = competition = good_results/competition.target.txt = rm -rf comp; cat test.fasta test_crux_index/test-random.fasta > concat.fasta; crux sequest-search --decoys peptide-shuffle --output-dir comp --fileroot concat test.ms2 concat.fasta; cut -f1-12,14-19 comp/concat.sequest.target.txt > good_results/competition.target.txt; crux sequest-search --decoys peptide-shuffle --output-dir comp --decoy-location target-file test.ms2 test_crux_index; cut -f1-12,14-17 comp/sequest.target.txt 

# Analyze matches with modifications from index
#1 = analyze_mods_index = good_results/analyze_mods_index.percolator.target.txt = crux percolator --feature-file TRUE --overwrite T --parameter-file params/mods-high-precision existing_crux_index crux-output; cat crux-output/percolator.target.txt = 'Time' 'Database'

# Test the feature file
#1 = perc-feature-file = good_results/percolator.features.txt = cat crux-output/percolator.features.txt = 

# MORE TESTS TODO

# generate tryptic peptides from non-tryptic index
# analyze matches using qvalue
# use ms2/fasta combos that do and do not find at least one peptide for each spec
# named sqt and decoys
# search with 0, 1 decoys
